/*
 * MIT License
 *
 * Copyright (C) 2023 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the “Software”), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of Advanced Micro Devices, Inc. shall not be used in advertising or
 * otherwise to promote the sale, use or other dealings in this Software without prior written authorization from
 * Advanced Micro Devices, Inc.
 */
#pragma once

#include <adf.h>
#include "system_settings.h"
#include "aie_kernels.h"

// REQUIRED: Include the test harness header file
#include "vck190_test_harness_graph.hpp"

std::vector<cint16> taps = std::vector<cint16>(
    {{-82, -253}, {0, -204},    {11, -35},    {-198, 273},  {-642, 467},  {-1026, 333},  {-927, 0},     {-226, -73},
     {643, 467},  {984, 1355},  {550, 1691},  {0, 647},     {538, -1656}, {2860, -3936}, {6313, -4587}, {9113, -2961},
     {9582, 0},   {7421, 2411}, {3936, 2860}, {1023, 1409}, {-200, -615}, {0, -1778},    {517, -1592},  {467, -643},
     {-192, 140}, {-882, 287},  {-1079, 0},   {-755, -245}, {-273, -198}, {22, 30},      {63, 194},     {0, 266}});

std::vector<cint16> taps_aie(taps.rbegin(), taps.rend());

#define GetPhase(Start, Step)                                                                            \
    {                                                                                                    \
        taps_aie[Start], taps_aie[Start + Step], taps_aie[Start + 2 * Step], taps_aie[Start + 3 * Step], \
            taps_aie[Start + 4 * Step], taps_aie[Start + 5 * Step], taps_aie[Start + 6 * Step],          \
            taps_aie[Start + 7 * Step]                                                                   \
    }

std::vector<cint16> taps4_0 = std::vector<cint16>(GetPhase(0, 1));

std::vector<cint16> taps4_1 = std::vector<cint16>(GetPhase(8, 1));

std::vector<cint16> taps4_2 = std::vector<cint16>(GetPhase(16, 1));

std::vector<cint16> taps4_3 = std::vector<cint16>(GetPhase(24, 1));

const int SHIFT = 0; // to analyze the output generated by impulses at the input
// const int SHIFT = 15; // for realistic input samples

using namespace adf;

class FIRGraph_4Kernels : public adf::graph {
   private:
    kernel k[4];

   public:
    input_port in[4];
    output_port out;

    FIRGraph_4Kernels() {
        k[0] = kernel::create_object<SingleStream::FIR_MultiKernel_cout<NUM_SAMPLES, SHIFT> >(taps4_0);
        k[1] = kernel::create_object<SingleStream::FIR_MultiKernel_cincout<NUM_SAMPLES, SHIFT> >(taps4_1);
        k[2] = kernel::create_object<SingleStream::FIR_MultiKernel_cincout<NUM_SAMPLES, SHIFT> >(taps4_2);
        k[3] = kernel::create_object<SingleStream::FIR_MultiKernel_cin<NUM_SAMPLES, SHIFT> >(taps4_3);

        const int NChunks = 4;

        for (int i = 0; i < NChunks; i++) {
            runtime<ratio>(k[i]) = 0.9;
            source(k[i]) = "aie_kernels/FirSingleStream.cpp";
            headers(k[i]) = {"aie_kernels/FirSingleStream.h"};
        }

        // Constraints: location of the first kernel in the cascade
        location<kernel>(k[0]) = tile(25, 0);

        // Discard first elements of the stream, depending on position in the cascade
        initialization_function(k[0]) = "SingleStream::FIRinit<0>";
        initialization_function(k[1]) = "SingleStream::FIRinit<8>";
        initialization_function(k[2]) = "SingleStream::FIRinit<16>";
        initialization_function(k[3]) = "SingleStream::FIRinit<24>";

        // Cascade Connections and output connection
        for (int i = 0; i < NChunks - 1; i++) connect<cascade>(k[i].out[0], k[i + 1].in[1]);
        connect<stream>(k[NChunks - 1].out[0], out);

        // Input Streams connections
        for (int i = 0; i < NChunks; i++) connect<stream>(in[i], k[i].in[0]);
    };
};

class TopGraph : public adf::graph {
   public:
    FIRGraph_4Kernels G1;

    input_plio in[4];
    output_plio out;

    TopGraph() {
        in[0] = input_plio::create("PLIO_01_TO_AIE", plio_128_bits, "data/PhaseIn_0.txt", 500);
        in[1] = input_plio::create("PLIO_03_TO_AIE", plio_128_bits, "data/PhaseIn_0.txt", 500);
        in[2] = input_plio::create("PLIO_05_TO_AIE", plio_128_bits, "data/PhaseIn_0.txt", 500);
        in[3] = input_plio::create("PLIO_07_TO_AIE", plio_128_bits, "data/PhaseIn_0.txt", 500);
        out = output_plio::create("PLIO_01_FROM_AIE", plio_128_bits, "data/Output_0.txt", 500);

        for (int i = 0; i < 4; i++) {
            connect<>(in[i].out[0], G1.in[i]);
        }
        connect<>(G1.out, out.in[0]);
    }
};
