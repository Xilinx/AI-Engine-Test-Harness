/*
 * MIT License
 *
 * Copyright (C) 2023 Advanced Micro Devices, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the “Software”), to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of Advanced Micro Devices, Inc. shall not be used in advertising or
 * otherwise to promote the sale, use or other dealings in this Software without prior written authorization from
 * Advanced Micro Devices, Inc.
 */
#pragma once

#include <adf.h>
#include "system_settings.h"
#include "aie_kernels.h"
#include "vck190_test_harness_graph.hpp"

using namespace adf;

std::vector<cint16> taps = std::vector<cint16>(
    {{-82, -253}, {0, -204},    {11, -35},    {-198, 273},  {-642, 467},  {-1026, 333},  {-927, 0},     {-226, -73},
     {643, 467},  {984, 1355},  {550, 1691},  {0, 647},     {538, -1656}, {2860, -3936}, {6313, -4587}, {9113, -2961},
     {9582, 0},   {7421, 2411}, {3936, 2860}, {1023, 1409}, {-200, -615}, {0, -1778},    {517, -1592},  {467, -643},
     {-192, 140}, {-882, 287},  {-1079, 0},   {-755, -245}, {-273, -198}, {22, 30},      {63, 194},     {0, 266}});

std::vector<cint16> taps_aie(taps.rbegin(), taps.rend());

const int SHIFT = 0; // to analyze the output generated by impulses at the input
// const int SHIFT = 15; // for realistic input samples

class FIRGraph_OneKernel : public adf::graph {
   private:
    kernel k;

   public:
    input_port in;
    output_port out;

    FIRGraph_OneKernel() {
        k = kernel::create_object<SingleStream::FIR_SingleStream<NUM_SAMPLES, SHIFT> >(taps_aie);

        connect<stream> net0(in, k.in[0]);
        connect<stream> net1(k.out[0], out);

        source(k) = "aie_kernels/FirSingleStream.cpp";
        headers(k) = {"aie_kernels/FirSingleStream.h"};
        runtime<ratio>(k) = 0.9;
    }
};

class TopGraph : public adf::graph {
   public:
    FIRGraph_OneKernel G1;

    TopGraph() {
        input_plio plin = input_plio::create("Column_12_TO_AIE", plio_128_bits, "data/PhaseIn_0.txt", 250);
        output_plio plout = output_plio::create("Column_28_FROM_AIE", plio_128_bits, "data/Output_0.txt", 250);

        connect<>(plin.out[0], G1.in);
        connect<>(G1.out, plout.in[0]);
    }
};
