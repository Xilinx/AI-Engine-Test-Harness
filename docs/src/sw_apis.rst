.. 
   MIT License

   Copyright (C) 2023 Advanced Micro Devices, Inc.

   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

   Except as contained in this notice, the name of Advanced Micro Devices, Inc. shall not be used in advertising or otherwise to promote the sale, use or other dealings in this Software without prior written authorization from Advanced Micro Devices, Inc.

.. _sw_apis:

.. toctree::
   :hidden:

Software APIs
=============

The AIE test harness includes software APIs for user to easily build SW applications to test an AIE graph on hardware board. The SW application is executed on the embedded ARM processor of the Versal device. The APIs are designed to structure the test applications following these simple steps:

1. Initialize the device, load the xclbin, and inferring the testing mode
2. Run the AIE graph as well as the PL data mover
3. Configure the DMA channels and start the data transfers between the PL and AIE graph
4. Wait for all the data to be sent/received
5. Report performance for each channel on performance testing modes, and optionally check correctness of results on functional testing mode or performance testing mode with limited data size

The test harness APIs are included in :url_to_repo:`include/test_harness_mgr.hpp`. 


Initialization
--------------

.. cpp:class:: test_harness_mgr
   
   The test harness manager class. This class encapsulates the necessary runtime objects to interact with the hardware DMA channels and the AIE graph. All test harness APIs belong to this class.

**Template Parameters**

``unsigned int N``
  Number of PLIOs (for input/output respectively)

``unsigned int W``
  PLIO bit-width in bytes

``unsigned int D``
  Depth of the 128-bit width cache in each PLIO channel (hard-coded for 4096 on VCK190 and 8192 on VEK280 due to on-chip URAM resource limitation)

.. cpp:function:: test_harness_mgr::test_harness_mgr(unsigned int device_index, std::string xclbin_file_path, std::vector<std::string> pl_krl_name, std::vector<std::string> graph_name, uint64_t test_mode, std::string device_type)

   The test harness manager class constructor. Loads the xclbin to the device and initializes the various test harness runtime objects.


**Parameters**

``unsigned int device_index``
  The device ID of the testing board, typically it should be zero

``std::string xclbin_file_path``
  The path and name of the xclbin file to be loaded and used for testing. There are 3 available XCLBINs in AIE Test Harness. ``vck190_test_harness_func.xclbin`` and ``vck190_test_harness_perf.xclbin`` for VCK190, ``vek280_test_harness.xclbin`` for VEK280. By default, the xclbin file(s) are generated by the corresponding test harness packaging script and placed in the ``pkg.hw.<shell name>.`` folder of the test application.

``std::vector<std::string> graph_name``
  The vector of graph names in the libadf.a packaged in the xclbin file


Running the AIE Graph
---------------------

.. cpp:function:: void test_harness_mgr::runAIEGraph(unsigned int g_idx, unsigned int iters)

   Run the specified AI Engine graph for a specified number of iterations. To ensure accurate performance results, this function should be called **before** :cpp:func:`test_harness_mgr::runTestHarness` when user wants to profile a valid performance after the HW board-run.  

**Parameters**

``unsigned int g_idx``
  The index of the graph in the vector of graph names passed to the class constructor. For designs with a single graph, this argument is zero.

``unsigned int iters``
  The number of graph iterations to run


Running the Test Harness
------------------------

.. cpp:enum:: channel_index

   Enumerated type listing the index of each DMA channel. The enumerated values corresponding to the names of the predefined PLIOs: :cpp:enum:`PLIO_01_TO_AIE`, :cpp:enum:`PLIO_02_TO_AIE`, etc...


.. cpp:struct:: test_harness_args

   DMA channel arguments

**Definition**

.. code-block:: c++

   struct test_harness_args {
    channel_index idx;
    unsigned int size_in_byte;
    unsigned int repetition;
    uint64_t delay;
    char* data;
   }

**Members**

``idx``
  The index of the DMA channel to be used, specified using the :cpp:enum:`channel_index` enum. The index corresponds to the name of the targeted AIE PLIO, and implicitly specifies the direction of the data transfer. 

``size_in_byte``
  The size (in bytes) of one data frame to be transferred to or from the AIE

``repetition``
  Number of replays used for test harness to perform the data transfer between PL and AIE multiple times

``delay``
  The start delay (in clock cycles) for this channel

``data``
  Pointer to the data that you want read or receive


.. cpp:function:: void test_harness_mgr::runTestHarness(std::vector<test_harness_args> args)

   Run the test harness using the specified DMA channel arguments. In performance testing mode, to ensure accurate performance results, this function should be called after :cpp:func:`test_harness_mgr::runAIEGraph`.  

**Parameters**

``std::vector<test_harness_args> args``
  A vector of DMA channel arguments


Waiting for Completion
----------------------

.. cpp:function:: void test_harness_mgr::waitForRes(int graph_timeout_millisec)

   Wait for all DMA engines to send and receive the expected amount of data, then wait for the AIE graph to finish, then get back the results to the host application. 

**Parameters**

``int graph_timeout_millisec``
  Timeout limit in milliseconds for AIE graph to finish. The timeout only applies to the completion of the AIE graph iterations. This function can block indefinitely if the DMA channels are configured to send or receive more data than what the AIE graph will consume or produce.


Reporting Performance
---------------------

.. cpp:function:: void test_harness_mgr::printPerf()

   Print the total number of cycles elapsed between the start and the end of the data transfer for each DMA channel. Must be called after :cpp:func:`test_harness_mgr::waitForRes` is returned. It is important to be noticed that **only performance** testing modes provide the valid performance numbers.
